# .github/workflows/playwright-daily.yml
# Runs Playwright (Python + pytest) shards every weekday at 11:42 AM IST (06:12 UTC)
# plus manual trigger

name: Run Playwright Python Tests

on:
  schedule:
    - cron: '30 3 * * 1-5'
  workflow_dispatch:

jobs:
  run-tests:
    name: Run pytest shard ${{ matrix.shardIndex }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3]
        shardTotal: [3]   # Adjust depending on how many shards you want

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create .env file
        run: |
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env
          echo "USERNAME1=${{ secrets.USERNAME1 }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
          echo "NEW_PASSWORD=${{ secrets.NEW_PASSWORD }}" >> .env
          echo "FIRST_NAME=${{ secrets.FIRST_NAME }}" >> .env
          echo "STREET_NAME=${{ secrets.STREET_NAME }}" >> .env
          echo "CITY=${{ secrets.CITY }}" >> .env
          echo "STATE=${{ secrets.STATE }}" >> .env
          echo "COUNTRY=${{ secrets.COUNTRY }}" >> .env
          echo "ZIP_CODE=${{ secrets.ZIP_CODE }}" >> .env

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies + Playwright browsers
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install --with-deps

      - name: Run pytest shard ${{ matrix.shardIndex }}
        run: |
          pytest tests/ \
            --maxfail=2 \
            --dist=loadscope \
            --tx ${{ matrix.shardTotal }}*popen \
            --html=playwright-report-${{ matrix.shardIndex }}/report.html \
            --json-report \
            --json-report-file=playwright-report-${{ matrix.shardIndex }}/report.json

      - name: Upload shard report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: shard-report-${{ matrix.shardIndex }}
          path: ./playwright-report-${{ matrix.shardIndex }}
          retention-days: 1

  merge-reports:
    name: Merge Reports
    needs: run-tests
    if: always()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all shard reports
        uses: actions/download-artifact@v4
        with:
          path: ./all-reports
          pattern: shard-report-*
          merge-multiple: true

      - name: Merge reports
        run: |
          mkdir -p playwright-report
          # Merge JSON reports into one
          jq -s 'reduce .[] as $item ({}; . * $item)' ./all-reports/**/*.json > playwright-report/report.json
          # Pick first HTML as final (pytest-html doesnâ€™t support merging natively)
          cp ./all-reports/**/report.html playwright-report/report.html || true

      - name: Upload combined report
        uses: actions/upload-artifact@v4
        with:
          name: Playwright Python Test Report
          path: ./playwright-report
          retention-days: 14

      - name: Send TestDino report
        run: |
          npx --yes tdpw ./playwright-report \
            --token="${{ secrets.TESTDINO_TOKEN }}" \
            --upload-html \
            --verbose
